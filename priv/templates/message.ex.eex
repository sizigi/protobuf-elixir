defmodule <%= name %> do
  @moduledoc false
  use Protobuf<%= options %>

  <%= typespec %>
  @derive [DeepMerge.Resolver]
  defstruct [<%= struct_fields %>]

  <%= if not is_nil(desc) do %>
  def descriptor do
    # credo:disable-for-next-line
    <%= desc.__struct__ %>.decode(
      <%= desc.__struct__.encode(desc |> Map.from_struct() |> Enum.filter(fn {_, x} -> x != nil end) |> desc.__struct__.new()) |> inspect(limit: :infinity) %>
    )
  end
  <% end %>

<%= for v <- oneofs do %>  <%= v %>
<% end %>

<%= for f <- fields do %>  field <%= f %>
<% end %>

  <%= if not is_nil(extensions) do %>
  extensions <%= extensions %>
  <% end %>
end

defmodule <%= name %>.ProtocolDef do
  @moduledoc false
  require Protocol
  Protocol.derive(Jason.Encoder, <%= name %>)
end

defimpl DeepMerge.Resolver, for: <%= name %> do
  def resolve(original, override = %<%= name %>{}, resolver) do
    cleaned_override =
      override
      |> Map.from_struct()
      |> Enum.reject(fn {_key, value} -> is_nil(value) end)
      |> Map.new()

    Map.merge(original, cleaned_override, resolver)
  end

  def resolve(original, override, resolver) when is_map(override) do
    Map.merge(original, override, resolver)
  end
end